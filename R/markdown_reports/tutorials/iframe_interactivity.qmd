---
title: "Testing iframe interaction"
author: "Adam Kemberling"
date: "Updated on: `r Sys.Date()`"
format: 
  html:
    code-tools: true
    df-print: kable
    toc: true
    self-contained: true
editor: source
execute: 
  echo: true
  warning: false
  message: false
  fig.height: 6
  fig.width: 6
  fig.align: "center"
  comment: ""
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Iframe interaction

The output of an html document should be able to be copied into any other web page as they are just regular html. Things like leaflet or observable.js integrations might be harder to nail down.

This document showcases a handful of each to see if they can be copied straight over to include them in our web products published by upswell.

## Observable Interactive Plots

```{r}
library(palmerpenguins)
library(gmRi)

# Define data to use for js
ojs_define(penguins = penguins)

```


### Plot Controls

Now we write the filtering function that will transform the data passed to observable using the values of `est_year` and `comname`.

To use our filter we’ll need some inputs, and we’ll want to be able to use the values of these inputs in our filtering function. To do this, we use the viewof keyword and with some standard Inputs:

The following controls will update the data for all plots simultaneously allowing direct comparison across multiple variables and species simultaneously.

Finally, we’ll plot the filtered data using Observable Plot (an open-source JavaScript library for quick visualization of tabular data):

```{ojs}
// Filtering Function
filtered = transpose(penguins).filter(function(penguin_dat) {
  return species.includes(penguin_dat.species) &&
         island.includes(penguin_dat.island);
})



/* Data View for Start Year*/
viewof species = Inputs.checkbox(
  ["Adelie", "Chinstrap", "Gentoo"], 
  {value: ["Adelie", "Chinstrap", "Gentoo"], 
   label: "Penguin Species:"}
)


/* Data View for Species */
viewof island = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe", "Dream"], 
    label: "Island:"
  }
)



/* Interactive Plot Code */
Plot.plot({
  style: "overflow: visible;",
  x:{grid : false, 
     label: "Body Mass (g) →"},
  y:{grid : true, 
     label: "↑ Flipper Length (mm)"},
  marks: [
      Plot.dot(filtered, {
        x: "body_mass_g", 
        y: "flipper_length_mm",
        stroke: "species", 
        marker: "circle"}),
    Plot.ruleY(
      filtered,
      Plot.groupZ({ y: "mean" }, { y: "flipper_length_mm", stroke: "species" })
    ),
    Plot.text(
      filtered,
      Plot.groupZ(
        { y: "mean", text: "first", x: () => d3.max(filtered, (dd) => dd.body_mass_g) },
        {
          y: "flipper_length_mm",
          x: "body_mass_g",
          fill: "species",
          text: "species",
          textAnchor: "start",
          dx: 0
        }
      )
    )
  ]

    
  }
)
```


## Leaflet Maps


```{r}

library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=-70.258, lat=43.652, popup="GMRI")
```

